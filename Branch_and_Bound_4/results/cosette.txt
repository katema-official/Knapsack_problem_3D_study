8|5|6|a
6|5|7|b
4|9|7|c
7|8|9|d
3|4|10|e
6|9|5|f
10|3|10|g
4|4|4|h


con controllo:
1.76
33786 righe in aaa.txt
174477 righe in progresses2.txt

4
5 9 6 0 0 0 f
7 9 4 0 0 6 c
3 10 4 7 0 6 e
5 8 6 5 0 0 a



senza controllo:
3.32
40717 righe in aaa.txt
468913 right in progresses2.txt

[stesso risultato]



con controllo, ma soprattutto avendo ridotto le rotazioni al minimo indispensabile:
0.42
9285 righe in aaa.txt
38975 right in progresses2.txt
(conta anche che, quando hai eseguito questo ultimo test, avevi meno del 20% di batteria, quindi eri in risparmio energetico!)

[stesso risultato]



----------------
Avendo aggiustato (definitivamente? Teoria: sì, pratica: da verificare con accurati testbench) l'esclusione dei volumi indotti
dai punti inammissibili...
NON avendo cambiato il calcolo del dual bound (ovvero usando ancora l'algoritmo di programmazione dinamica con la lista inefficiente)
l'istanza è tale per cui:
(Also, sono attaccato alla corrente e ho la batteria al massimo)

0.14
10146 righe in aaa.txt
54576 right in progresses2.txt

Risultato: peggiorato di poco rispetto al caso precedente, ma ci ho guadagnato che ora l'algoritmo è CORRETTO (butta via...)
[stesso risultato]

TODO: 
-aggiornare l'algoritmo di programmazione dinamica e tutta la sua infrastruttura
con un algoritmo per la subset sum intelligente, dove costruisci un albero di soluzioni
parziali che ogni volta percorri per trovare, data la sequenza (ordinata) di volumi
che hai in mano, la sub-sum massimale inferiore o uguale alla capacità data (capacità,
come prima, ottenuta escludendo il volume delle scatole già piazzate e dei punti
dove non si può più mettere niente)
-creare un nuovo progresses.txt dove, assieme alle scatole piazzate in quel sottoproblema,
vengono elencati anche i volumi "eterei" (come fossero scatole, magari di un colore
particolare tipo il bianco o il rosso), ovvero quelli che NON possono essere in alcun
modo occupati da successive scatole (sarebbe un buon test di correttezza)


Col print degli spazi inutilizzabili:
(no spina di corrente per i prossimi due)

1.5
17448 righe in aaa.txt (hai aggiunto no points!)
87161 righe in progresses2.txt

togliendo ogni debug:

0.12


-------------

IDEA IDEA IDEA
Quando scopri dei punti dove non ci può stare nulla: non buttarli!
escludili dalla lsita di extreme_points (perché appunto non ci puoi mettere nulla),
ma salvateli su un'altra lista così te li porti dietro alle iterazioni successive,
e non ti scordi qual è il volume inoccupabile. Questo potrebbe migliorare il dual bound!!!

ALLORA:
prima di applicare la nuova idea, sempre su quell'istanzina da 7 scatole (ora sono sul fisso):
0.10
17448 righe in aaa.txt
87161 right in progresses2.txt

dopo aver applicato la nuova idea:
0.5
15282 righe in aaa.txt
89857 righe in progresses2.txt

DIO MIO I RISULTATI SPERIMENTALI TORNANO CON LA TEORIA HAHAHAHA, NON CI CREDOOOOOO
Perché praticamente:
-ci metti meno tempo perché ogni volta trovi dei duali più forti (stringenti)
-progresses2.txt ha qualche riga in più perché stavolta ti porti dietro anche le informazioni,
sui volumi "inoccupabili", che avevi scoperto al nodo prima, e quindi ci sono più righe informative,
rispetto ai "boxes volumes unavailable", da stampare su progresses2.txt

Non sto piangendo, mi è solo entrato un Knapsack nello'occhio
(e non ho ancora implementato la nuova idea per il calcolo del duale HAHAHAHAHA)
(☞ ^o^)☞

(i tempi riportati sopra sono con tutti i debug del caso attivo, se li disattivi 
scendono a 0.0 -> ricorda che l'istanza è (relativamente) piccola)

Ho fatto delle prove mettendo a confronto le due finestre di ursina, la nuova 
implementazione risparmia 2000 configurazioni (stica mica male)

(a bug risolto, così che ora garantisco sempre la preservazione dell'ottimalità)

0.5
15998 aaa.txt
89547 progresses2.txt (hai tolto i volumi da escludere "fasulli" che avevano uno 0 in una qualche dimensione)


YEAAAAAAAAAAAAAAAAAH
Allora praticamente a sto giro la generazione dei volumi inoccupabili (quelli rossi) è ricorsiva,
cioè mi baso sui volumi rossi per generare altri volumi rossi, e il dual bound si è abbassato di molto.
Mi sento un figo, piango.
No davvero, prova a eseguire la versione di Branch_and_Bound_3 e quella di branch_and_Bound_4 insieme, e mettile a confronto.
Piangerai anche tu dalla gioia
11.030 nodi generati vs 10.255
(sì sì ridi ridi se pensi sia poco, ne riparliamo su istanze più grandi, e non questa che ha solo 8 scatole e contx=conty=contz)




Zio.
Tu, ogni volta che scendi per un nodo, ti porti dietro TUTTE le maledette scatole che non hai ancora posizionato.
Non pensi sia meglio escludere quelle che SAI PER CERTO non potrai mettere?
E lo puoi fare? Certo caro. leggiti la nota IMMENSA che ti sei scritto in uno degli ultimi commit, dove studi
un modo intelligente per rimuovere più volume possibile che sai di non poter occupare da un nodo.
Fatto quello, se ti avanzano dei punti in cui puoi mettere delle scatole, guardali (i punti) uno ad uno:
per ognuno di essi, controlla ogni scatola.
Se c'è una scatola (o più di una scatola) che non riesce a posizionarsi IN NESSUN PUNTO di quelli disponibili:
non portartela dietro al sotto-albero successivo.
E sai perché? Perché così facendo, quando risolvi il subset-sum per il calcolo del primale, le uniche scatole di cui
considererai il volume, saranno le uniche ad avere una chance di essere posizionate.

TL:DR; te ogni volta ti porti al nodo successivo tutte le scatole non posizionate nella configurazione corrente.
Sebbene questo non ti permetta comunque, per come hai scritto il codice, di generare soluzioni inammissibili (ove alcune
scatole escono dal container), queste sono comunque tenute di conto nel risolvere il subset sum. E questa è una cosa stupida.

Good work, Katema del futuro!

P.S. controlla anche la scatola sotto, per vedere se c'è una scatola a destra o una davanti (o entrambe) di cui tenere di conto
per il calcolo del volume rosso.

Un'altra roba: i punti che spawnano a destra di una scatola, cerca di "spingerli" più che puoi indietro (ovvero finché non toccano
un'altra scatola, che penso possa anche essere rossa?), perché tipo con l'istanza mst_36_v_20_560, dove non tenevo di conto di questa
cosa, venivano fuori soluzioni parecchio stupide. 
Stessa cosa per i punti che nascono davanti a una scatola: spingili più che puoi a sinistra.